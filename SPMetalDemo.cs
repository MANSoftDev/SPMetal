//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeProject.SharePoint.Demo {
	using System;
	
	
	public partial class CodeProjectDemo : Microsoft.SharePoint.Linq.DataContext {
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		#endregion
		
		public CodeProjectDemo(string requestUrl) : 
				base(requestUrl) {
			this.OnCreated();
		}
		
		/// <summary>
		/// Instance of companies list
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Companies")]
		public Microsoft.SharePoint.Linq.EntityList<CPCompany> Companies {
			get {
				return this.GetList<CPCompany>("Companies");
			}
		}
		
		/// <summary>
		/// Instance contacts list
		/// </summary>
		[Microsoft.SharePoint.Linq.ListAttribute(Name="Contacts")]
		public Microsoft.SharePoint.Linq.EntityList<CompanyContact> CPContacts {
			get {
				return this.GetList<CompanyContact>("Contacts");
			}
		}
	}
	
	/// <summary>
	/// Create a new list item.
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01")]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(CPCompany))]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(CPContact))]
	public partial class Item : Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging {
		
		private System.Nullable<int> _id;
		
		private System.Nullable<int> _version;
		
		private string _path;
		
		private Microsoft.SharePoint.Linq.EntityState _entityState;
		
		private System.Collections.Generic.IDictionary<string, object> _originalValues;
		
		private string _title;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion

		Microsoft.SharePoint.Linq.EntityState Microsoft.SharePoint.Linq.ITrackEntityState.EntityState {
			get {
				return this._entityState;
			}
			set {
				if ((value != this._entityState)) {
					this._entityState = value;
				}
			}
		}

		System.Collections.Generic.IDictionary<string, object> Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues {
			get {
				if ((null == this._originalValues)) {
					this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
				}
				return this._originalValues;
			}
		}
		
		public Item() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ID", Storage="_id", ReadOnly=true, FieldType="Counter")]
		public System.Nullable<int> Id {
			get {
				return this._id;
			}
			set {
				if ((value != this._id)) {
					this.OnPropertyChanging("Id", this._id);
					this._id = value;
					this.OnPropertyChanged("Id");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="owshiddenversion", Storage="_version", ReadOnly=true, FieldType="Integer")]
		public System.Nullable<int> Version {
			get {
				return this._version;
			}
			set {
				if ((value != this._version)) {
					this.OnPropertyChanging("Version", this._version);
					this._version = value;
					this.OnPropertyChanged("Version");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileDirRef", Storage="_path", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
		public string Path {
			get {
				return this._path;
			}
			set {
				if ((value != this._path)) {
					this.OnPropertyChanging("Path", this._path);
					this._path = value;
					this.OnPropertyChanged("Path");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Title", Storage="_title", Required=true, FieldType="Text")]
		public string Title {
			get {
				return this._title;
			}
			set {
				if ((value != this._title)) {
					this.OnPropertyChanging("Title", this._title);
					this._title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		protected virtual void OnPropertyChanged(string propertyName) {
			if ((null != this.PropertyChanged)) {
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		protected virtual void OnPropertyChanging(string propertyName, object value) {
			if ((null == this._originalValues)) {
				this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
			}
			if ((false == this._originalValues.ContainsKey(propertyName))) {
				this._originalValues.Add(propertyName, value);
			}
			if ((null != this.PropertyChanging)) {
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
	}
	
	/// <summary>
	/// Demo content type for companies
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="CPCompany", Id="0x0100BD31A6951C0243FAA9AD062940325D8A")]
	public partial class CPCompany : Item {
		
		private string _company;
		
		private Microsoft.SharePoint.Linq.EntitySet<CompanyContact> _companyContact;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public CPCompany() {
			this._companyContact = new Microsoft.SharePoint.Linq.EntitySet<CompanyContact>();
			this._companyContact.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<CompanyContact>>(this.OnCompanyContactSync);
			this._companyContact.OnChanged += new System.EventHandler(this.OnCompanyContactChanged);
			this._companyContact.OnChanging += new System.EventHandler(this.OnCompanyContactChanging);
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="CompanyName", Storage="_company", FieldType="Text")]
		public string Company {
			get {
				return this._company;
			}
			set {
				if ((value != this._company)) {
					this.OnPropertyChanging("Company", this._company);
					this._company = value;
					this.OnPropertyChanged("Company");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="CompanyLookup", Storage="_companyContact", ReadOnly=true, MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Backward, List="Contacts")]
		public Microsoft.SharePoint.Linq.EntitySet<CompanyContact> CompanyContact {
			get {
				return this._companyContact;
			}
			set {
				this._companyContact.Assign(value);
			}
		}
		
		private void OnCompanyContactChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("CompanyContact", this._companyContact.Clone());
		}
		
		private void OnCompanyContactChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("CompanyContact");
		}
		
		private void OnCompanyContactSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<CompanyContact> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.CPCompany = this;
			}
			else {
				e.Item.CPCompany = null;
			}
		}
	}
	
	/// <summary>
	/// Demo content type for contacts
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="CPContact", Id="0x0100524A1BB0926F4201B7C8E3C366D36FCD")]
	[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(CompanyContact))]
	public partial class CPContact : Item {
		
		private string _firstName;
		
		private string _lastName;
		
		private string _contactTitle;
		
		private System.Nullable<TypeOfContact> _typeOfContact;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public CPContact() {
			this.OnCreated();
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FirstName", Storage="_firstName", FieldType="Text")]
		public string FirstName {
			get {
				return this._firstName;
			}
			set {
				if ((value != this._firstName)) {
					this.OnPropertyChanging("FirstName", this._firstName);
					this._firstName = value;
					this.OnPropertyChanged("FirstName");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="LastName", Storage="_lastName", FieldType="Text")]
		public string LastName {
			get {
				return this._lastName;
			}
			set {
				if ((value != this._lastName)) {
					this.OnPropertyChanging("LastName", this._lastName);
					this._lastName = value;
					this.OnPropertyChanged("LastName");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContactTitle", Storage="_contactTitle", FieldType="Text")]
		public virtual string ContactTitle {
			get {
				return this._contactTitle;
			}
			set {
				if ((value != this._contactTitle)) {
					this.OnPropertyChanging("ContactTitle", this._contactTitle);
					this._contactTitle = value;
					this.OnPropertyChanged("ContactTitle");
				}
			}
		}
		
		[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ContactType", Storage="_typeOfContact", FieldType="Choice")]
		public System.Nullable<TypeOfContact> TypeOfContact {
			get {
				return this._typeOfContact;
			}
			set {
				if ((value != this._typeOfContact)) {
					this.OnPropertyChanging("TypeOfContact", this._typeOfContact);
					this._typeOfContact = value;
					this.OnPropertyChanged("TypeOfContact");
				}
			}
		}
	}
	
	/// <summary>
	/// Demo content type for contacts
	/// </summary>
	[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Contact", Id="0x0100524A1BB0926F4201B7C8E3C366D36FCD", List="Contacts")]
	public partial class CompanyContact : CPContact {
		
		private Microsoft.SharePoint.Linq.EntityRef<CPCompany> _cPCompany;
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate();
		partial void OnCreated();
		#endregion
		
		public CompanyContact() {
			this._cPCompany = new Microsoft.SharePoint.Linq.EntityRef<CPCompany>();
			this._cPCompany.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<CPCompany>>(this.OnCPCompanySync);
			this._cPCompany.OnChanged += new System.EventHandler(this.OnCPCompanyChanged);
			this._cPCompany.OnChanging += new System.EventHandler(this.OnCPCompanyChanging);
			this.OnCreated();
		}
		
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
		[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
		public override string ContactTitle {
			get {
				throw new System.InvalidOperationException("Field ContactTitle was removed from content type Contact.");
			}
			set {
				throw new System.InvalidOperationException("Field ContactTitle was removed from content type Contact.");
			}
		}
		
		[Microsoft.SharePoint.Linq.AssociationAttribute(Name="CompanyLookup", Storage="_cPCompany", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Companies")]
		public CPCompany CPCompany {
			get {
				return this._cPCompany.GetEntity();
			}
			set {
				this._cPCompany.SetEntity(value);
			}
		}
		
		private void OnCPCompanyChanging(object sender, System.EventArgs e) {
			this.OnPropertyChanging("CPCompany", this._cPCompany.Clone());
		}
		
		private void OnCPCompanyChanged(object sender, System.EventArgs e) {
			this.OnPropertyChanged("CPCompany");
		}
		
		private void OnCPCompanySync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<CPCompany> e) {
			if ((Microsoft.SharePoint.Linq.AssociationChangedState.Added == e.State)) {
				e.Item.CompanyContact.Add(this);
			}
			else {
				e.Item.CompanyContact.Remove(this);
			}
		}
	}
	
	public enum TypeOfContact : int {
		
		None = 0,
		
		Invalid = 1,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Sales Rep")]
		SalesRep = 2,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="VP")]
		VP = 4,
		
		[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Pointy Haired Boss")]
		PointyHairedBoss = 8,
	}
}
